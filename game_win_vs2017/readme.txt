大概这就是最终版本了，也没有时间进行修改了。

贪心算法是一切的基础。枚举每一个空白的点，对于每一个空白点，寻找它所有方向上的连续情况，并对应估值。我的估值表跨度非常大，基本上多连续一个棋子就高一个数量级，感觉这样优先级计算出错的概率更小。

招法生成函数只是为了方便，下面顺便说一下就好。

关键在于搜索函数。
开局第一回合用直接的贪心下，尽量下中央，尽量贴着对手的棋子。之后回合用搜索。

四连五（或阻止对手四连五）不能出任何差错，直接用贪心特判，保证正确率。

因为太菜，写不好alpha&beta剪枝，除了PPT上的修剪别的啥也想不到，只能用两次搜索这样的笨办法。

第一次搜索对全局进行，深度只有两层（一回合、AI和对手两步），让剪枝返回可能得到的估值，主要是为了防止间断但实际上很危险的情况发生，就像：
●●！●   或者  ●●！
                     ●
                     ●

第二次搜索只对部分点进行。用招法生成函数找出价值最高的20个点（再多点慢的受不了），然后对这20个点进行深度为四层的搜索（当然每一个点、每一层里也都是只取20个点）。预测一下稍微长远一点的发展。

这两次搜索的估值和最优招法都要记录下来。对两次估值进行对比，哪一次得到的估值高就选哪一种招法。

程序本身运行效率不高。因为不会用引用，很多东西都是直接设成全局变量或整体传参，比如直接传递16*16的棋盘，直接传递有几十个元素的vector……

总结一下：

优点：
四子连续的情况绝对不会失误。
两次搜索，保证基本稳定性的同时又有一定的预测能力。
虽然写的时候我让他倾向于防守，然而它还是倾向于连续、凶猛的进攻。
每一步计算时间控制在十秒之内，防止对手揍我。

缺点：
开局第一步真的应该用贪心解决吗？不知道。
对于有间断的情况判断正确率不能达到百分之一百。
程序总体效率低，而且仍然有大量的重复计算。
对活三判断可能出错。
中后期可能四层搜索会得到一些匪夷所思的结果。
长远预期能力仍然有限。
估算AI胜率的那个东西就是闹着玩的。
还没有大量实践测试。

参考资料:
学长的PPT，
一堆CSDN博客，
博弈与剪枝https://blog.csdn.net/qq_27008079/article/details/60869054
啥都讲了一些https://blog.csdn.net/qq_42058018/article/details/81142881?utm_source=blogxgwz0
整个的五子棋程序结构https://download.csdn.net/download/sdzuiaidanpianji/9452789
五子棋实现解释https://blog.csdn.net/lf_2016/article/details/54692581
还有更多……

鸣谢：
ACM俱乐部，
和我下棋、教我写搜索和剪枝的大佬，
Thinkpad耐敲的键盘，
VS2017超好用，
4399里各种AI，
玩QQ五子棋、IOS上一个联机五子棋游戏的老哥们。
